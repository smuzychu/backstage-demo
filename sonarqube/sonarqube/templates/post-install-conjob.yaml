apiVersion: batch/v1
kind: CronJob
metadata:
  name: post-install
  annotations:
    argocd.argoproj.io/sync-wave: "28"
  labels:
    {{- include "sonarqube.labels" . | nindent 4 }}      
spec:
  schedule: "*/5 * * * *"
  successfulJobsHistoryLimit: 2
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: hello
            image: openshift4/ose-tools-rhel8:latest
            imagePullPolicy: IfNotPresent
            command:
            - /bin/sh
            - -c
            - |
                set -e
                
                if oc get secret sonarqube-credentials -n {{ .Release.Namespace }} ; then
                    echo "sonarqube-credentials is already created exiting..."
                else
                  num_tokens=$(curl -s -u admin:admin1 -X GET -H "Content-Type: application/json" https://sonarqube-sonarqube.apps.crc.testing/api/user_tokens/search | jq '.userTokens[] | select(.name=="backstage") | length')
                  if [ -z "$num_tokens" ]; then
                    echo "sonarqube-credentials doesn't exist"
                    echo "creating token..."
                    export curl_answer=$(curl -s -u admin:admin1 -X POST -H "Content-Type: application/json" https://{{ include "sonarqube.fullname" . }}-{{ .Release.Namespace }}.apps.{{ .Values.base_domain }}/api/user_tokens/generate?name=backstage)
                    export token=$(echo $curl_answer | jq -r .token)
                    echo "creating sonarqube-credentials secret..."
                    oc create secret generic sonarqube-credentials -n {{ .Release.Namespace }} --from-literal=SONARQUBE_TOKEN=${token}
                    oc annotate secret sonarqube-credentials --overwrite -n {{ .Release.Namespace }} reflector.v1.k8s.emberstack.com/reflection-allowed="true" reflector.v1.k8s.emberstack.com/reflection-auto-enabled=true reflector.v1.k8s.emberstack.com/reflection-auto-namespaces=backstage
                  fi  
                fi    
            
          restartPolicy: OnFailure